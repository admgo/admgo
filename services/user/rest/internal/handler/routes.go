// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	login "github.com/admgo/admgo/services/user/rest/internal/handler/login"
	logout "github.com/admgo/admgo/services/user/rest/internal/handler/logout"
	register "github.com/admgo/admgo/services/user/rest/internal/handler/register"
	session "github.com/admgo/admgo/services/user/rest/internal/handler/session"
	token "github.com/admgo/admgo/services/user/rest/internal/handler/token"
	"github.com/admgo/admgo/services/user/rest/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/user"),
		rest.WithTimeout(10000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthenticationMiddleware, serverCtx.CSRFTokenMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: logout.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/user"),
		rest.WithTimeout(10000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: register.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/user"),
		rest.WithTimeout(10000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthenticationMiddleware, serverCtx.CSRFTokenMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/session/:session_id",
					Handler: session.GetSingleSessionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/session/:session_id",
					Handler: session.DeleteSessionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sessions",
					Handler: session.GetTSessionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/user"),
		rest.WithTimeout(10000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthenticationMiddleware, serverCtx.CSRFTokenMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/token",
					Handler: token.AddTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/token/:token_id",
					Handler: token.GetSingleTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/token/:token_id",
					Handler: token.EditTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/token/:token_id",
					Handler: token.DeleteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tokens",
					Handler: token.GetTokensHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/user"),
		rest.WithTimeout(10000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)
}
