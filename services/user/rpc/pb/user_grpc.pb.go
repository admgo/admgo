// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user.protobuf

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_CreateUser_FullMethodName                          = "/service.User/CreateUser"
	User_FindSingleUserByUserID_FullMethodName              = "/service.User/FindSingleUserByUserID"
	User_FindSingleUserByUsernameAndPassword_FullMethodName = "/service.User/FindSingleUserByUsernameAndPassword"
	User_FindAllUser_FullMethodName                         = "/service.User/FindAllUser"
	User_DeleteUser_FullMethodName                          = "/service.User/DeleteUser"
	User_UpdateUserInfo_FullMethodName                      = "/service.User/UpdateUserInfo"
	User_UpdateUserEmail_FullMethodName                     = "/service.User/UpdateUserEmail"
	User_UpdateUserName_FullMethodName                      = "/service.User/UpdateUserName"
	User_UpdateUserPhone_FullMethodName                     = "/service.User/UpdateUserPhone"
	User_UpdateUserEmployeeNumber_FullMethodName            = "/service.User/UpdateUserEmployeeNumber"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// 根据用户ID查找指定用户
	FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...grpc.CallOption) (*FindSingleUserByUserIDResponse, error)
	// 根据用户名密码查找指定用户
	FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...grpc.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error)
	// 查找所有用户
	FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// 更新用户信息（包括邮箱、用户名称等）
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
	// 更新用户邮箱
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// 更新用户名称
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// 更新用户手机号
	UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error)
	// 更新用户员工号
	UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...grpc.CallOption) (*FindSingleUserByUserIDResponse, error) {
	out := new(FindSingleUserByUserIDResponse)
	err := c.cc.Invoke(ctx, User_FindSingleUserByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...grpc.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error) {
	out := new(FindSingleUserByUsernameAndPasswordResponse)
	err := c.cc.Invoke(ctx, User_FindSingleUserByUsernameAndPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error) {
	out := new(FindAllUserResponse)
	err := c.cc.Invoke(ctx, User_FindAllUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, User_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	out := new(UpdateUserInfoResponse)
	err := c.cc.Invoke(ctx, User_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, User_UpdateUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, User_UpdateUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error) {
	out := new(UpdateUserPhoneResponse)
	err := c.cc.Invoke(ctx, User_UpdateUserPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error) {
	out := new(UpdateUserEmployeeNumberResponse)
	err := c.cc.Invoke(ctx, User_UpdateUserEmployeeNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// 根据用户ID查找指定用户
	FindSingleUserByUserID(context.Context, *FindSingleUserByUserIDRequest) (*FindSingleUserByUserIDResponse, error)
	// 根据用户名密码查找指定用户
	FindSingleUserByUsernameAndPassword(context.Context, *FindSingleUserByUsernameAndPasswordRequest) (*FindSingleUserByUsernameAndPasswordResponse, error)
	// 查找所有用户
	FindAllUser(context.Context, *FindAllUserRequest) (*FindAllUserResponse, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// 更新用户信息（包括邮箱、用户名称等）
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error)
	// 更新用户邮箱
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// 更新用户名称
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// 更新用户手机号
	UpdateUserPhone(context.Context, *UpdateUserPhoneRequest) (*UpdateUserPhoneResponse, error)
	// 更新用户员工号
	UpdateUserEmployeeNumber(context.Context, *UpdateUserEmployeeNumberRequest) (*UpdateUserEmployeeNumberResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) FindSingleUserByUserID(context.Context, *FindSingleUserByUserIDRequest) (*FindSingleUserByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSingleUserByUserID not implemented")
}
func (UnimplementedUserServer) FindSingleUserByUsernameAndPassword(context.Context, *FindSingleUserByUsernameAndPasswordRequest) (*FindSingleUserByUsernameAndPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSingleUserByUsernameAndPassword not implemented")
}
func (UnimplementedUserServer) FindAllUser(context.Context, *FindAllUserRequest) (*FindAllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUser not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedUserServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedUserServer) UpdateUserPhone(context.Context, *UpdateUserPhoneRequest) (*UpdateUserPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPhone not implemented")
}
func (UnimplementedUserServer) UpdateUserEmployeeNumber(context.Context, *UpdateUserEmployeeNumberRequest) (*UpdateUserEmployeeNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmployeeNumber not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindSingleUserByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSingleUserByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindSingleUserByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindSingleUserByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindSingleUserByUserID(ctx, req.(*FindSingleUserByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindSingleUserByUsernameAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSingleUserByUsernameAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindSingleUserByUsernameAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindSingleUserByUsernameAndPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindSingleUserByUsernameAndPassword(ctx, req.(*FindSingleUserByUsernameAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindAllUser(ctx, req.(*FindAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserPhone(ctx, req.(*UpdateUserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserEmployeeNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmployeeNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserEmployeeNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserEmployeeNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserEmployeeNumber(ctx, req.(*UpdateUserEmployeeNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "FindSingleUserByUserID",
			Handler:    _User_FindSingleUserByUserID_Handler,
		},
		{
			MethodName: "FindSingleUserByUsernameAndPassword",
			Handler:    _User_FindSingleUserByUsernameAndPassword_Handler,
		},
		{
			MethodName: "FindAllUser",
			Handler:    _User_FindAllUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _User_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _User_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserPhone",
			Handler:    _User_UpdateUserPhone_Handler,
		},
		{
			MethodName: "UpdateUserEmployeeNumber",
			Handler:    _User_UpdateUserEmployeeNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.protobuf",
}
