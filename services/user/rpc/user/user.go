// Code generated by goctl. DO NOT EDIT.
// Source: user.protobuf

package user

import (
	"context"

	"github.com/admgo/admgo/services/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest                           = pb.CreateUserRequest
	CreateUserResponse                          = pb.CreateUserResponse
	DeleteUserRequest                           = pb.DeleteUserRequest
	DeleteUserResponse                          = pb.DeleteUserResponse
	FindAllUserRequest                          = pb.FindAllUserRequest
	FindAllUserResponse                         = pb.FindAllUserResponse
	FindSingleUserByUserIDRequest               = pb.FindSingleUserByUserIDRequest
	FindSingleUserByUserIDResponse              = pb.FindSingleUserByUserIDResponse
	FindSingleUserByUsernameAndPasswordRequest  = pb.FindSingleUserByUsernameAndPasswordRequest
	FindSingleUserByUsernameAndPasswordResponse = pb.FindSingleUserByUsernameAndPasswordResponse
	UpdateUserEmailRequest                      = pb.UpdateUserEmailRequest
	UpdateUserEmailResponse                     = pb.UpdateUserEmailResponse
	UpdateUserEmployeeNumberRequest             = pb.UpdateUserEmployeeNumberRequest
	UpdateUserEmployeeNumberResponse            = pb.UpdateUserEmployeeNumberResponse
	UpdateUserInfoRequest                       = pb.UpdateUserInfoRequest
	UpdateUserInfoResponse                      = pb.UpdateUserInfoResponse
	UpdateUserNameRequest                       = pb.UpdateUserNameRequest
	UpdateUserNameResponse                      = pb.UpdateUserNameResponse
	UpdateUserPhoneRequest                      = pb.UpdateUserPhoneRequest
	UpdateUserPhoneResponse                     = pb.UpdateUserPhoneResponse
	UserItem                                    = pb.UserItem

	User interface {
		// 创建用户
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		// 根据用户ID查找指定用户
		FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...grpc.CallOption) (*FindSingleUserByUserIDResponse, error)
		// 根据用户名密码查找指定用户
		FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...grpc.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error)
		// 查找所有用户
		FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error)
		// 删除用户
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// 更新用户信息（包括邮箱、用户名称等）
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
		// 更新用户邮箱
		UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
		// 更新用户名称
		UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
		// 更新用户手机号
		UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error)
		// 更新用户员工号
		UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 创建用户
func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

// 根据用户ID查找指定用户
func (m *defaultUser) FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...grpc.CallOption) (*FindSingleUserByUserIDResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.FindSingleUserByUserID(ctx, in, opts...)
}

// 根据用户名密码查找指定用户
func (m *defaultUser) FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...grpc.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.FindSingleUserByUsernameAndPassword(ctx, in, opts...)
}

// 查找所有用户
func (m *defaultUser) FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*FindAllUserResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.FindAllUser(ctx, in, opts...)
}

// 删除用户
func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 更新用户信息（包括邮箱、用户名称等）
func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 更新用户邮箱
func (m *defaultUser) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserEmail(ctx, in, opts...)
}

// 更新用户名称
func (m *defaultUser) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserName(ctx, in, opts...)
}

// 更新用户手机号
func (m *defaultUser) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserPhone(ctx, in, opts...)
}

// 更新用户员工号
func (m *defaultUser) UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...grpc.CallOption) (*UpdateUserEmployeeNumberResponse, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserEmployeeNumber(ctx, in, opts...)
}
